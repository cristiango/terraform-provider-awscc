// Code generated by generators/resource/main.go; DO NOT EDIT.

package sample

import (
	"context"

	. "github.com/eVisionSoftware/axiom/axiom-terraform-provider/internal/generic"
	"github.com/eVisionSoftware/axiom/axiom-terraform-provider/internal/registry"
	"github.com/hashicorp/terraform-plugin-framework/provider"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-plugin-framework/tfsdk"
	"github.com/hashicorp/terraform-plugin-framework/types"
)

func init() {
	registry.AddResourceTypeFactory("awscc_sample_resource_type", resourceTypeResourceType)
}

// resourceTypeResourceType returns the Terraform awscc_sample_resource_type resource type.
// This Terraform resource type corresponds to the CloudFormation Axiom::Sample::ResourceType resource type.
func resourceTypeResourceType(ctx context.Context) (provider.ResourceType, error) {
	attributes := map[string]tfsdk.Attribute{
		"description": {
			// Property: Description
			// CloudFormation resource type schema:
			// {
			//   "description": "A meaninfull description",
			//   "type": "string"
			// }
			Description: "A meaninfull description",
			Type:        types.StringType,
			Optional:    true,
		},
		"id": {
			// Property: Id
			// CloudFormation resource type schema:
			// {
			//   "description": "The Identifier of the Resource Type",
			//   "type": "string"
			// }
			Description: "The Identifier of the Resource Type",
			Type:        types.StringType,
			Computed:    true,
			PlanModifiers: []tfsdk.AttributePlanModifier{
				resource.UseStateForUnknown(),
			},
		},
		"name": {
			// Property: Name
			// CloudFormation resource type schema:
			// {
			//   "description": "The name of the Resource Type",
			//   "type": "string"
			// }
			Description: "The name of the Resource Type",
			Type:        types.StringType,
			Required:    true,
		},
	}

	schema := tfsdk.Schema{
		Description: "This is an example Axiom Resource Type",
		Version:     1,
		Attributes:  attributes,
	}

	var opts ResourceTypeOptions

	opts = opts.WithCloudFormationTypeName("Axiom::Sample::ResourceType").WithTerraformTypeName("awscc_sample_resource_type")
	opts = opts.WithTerraformSchema(schema)
	opts = opts.WithSyntheticIDAttribute(false)
	opts = opts.WithAttributeNameMap(map[string]string{
		"description": "Description",
		"id":          "Id",
		"name":        "Name",
	})

	opts = opts.WithCreateTimeoutInMinutes(0).WithDeleteTimeoutInMinutes(0)

	opts = opts.WithUpdateTimeoutInMinutes(0)

	resourceType, err := NewResourceType(ctx, opts...)

	if err != nil {
		return nil, err
	}

	return resourceType, nil
}
